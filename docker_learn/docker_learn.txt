# Docker让应用的部署、测试和分发变得前所未有的高效和轻松

## 基本概念
    1. 镜像:只读
       a. 镜像构建时会一层层构建，前一层是后一层的基础,如果在后一层的镜像删除了文件，也只会标记删除，不是真正的删除。
       b. 基础镜像是可以依赖的, 节约硬盘空间
    2. 容器:系统
        容器启动时在上面创建一个存储层，存储层的生命周期和容器一样, 任何存储层的东西都会随着容器的删除而消失。
    3. 仓库:Docker Registry             
        仓库名经常以两段式路径形式出现: 如 jwilder/nginx-proxy
        Registry公开服务: 官方Docker Hub, 也可搭建自己的私有仓库

## 一键安装docker
curl -fsSL get.docker.com -o get-docker.sh
sudo sh get-docker.sh --mirror Aliyun
    ### 启动docker
        sudo systempctl enable docker
        sudo systempctl start docker
    ### ubuntu 14.04
        sudo service docker start
                                            

# 创建一个新的shell
docker exec -it showdoc /bin/bash # 在已经运行的程序中执行命令
docker exec -d daemon_dave touch /etc/new_config_file
docker run -it ubuntu bash

# 启动镜像
docker start 8ace22b4f825 # 启动老的镜像
docker run 8ace22b4f825 # 运行一个新的镜像

# 建立docker组:
sudo groupadd docker
sudo usermod -aG docekr $USER

# 运行
docker run -it --rm unbuntu bash
#  --rm 容器退出后随即删除 

# 镜像体积
    docker images ls
    所看到的的体积不是真实的体积，因为使用的是Union FS, 很多层可以共用的

# 虚悬镜像(停止运行的)
    docker image ls -f dangling=true
    docker image prune # 删除虚悬镜像

# 中间层镜像
    docker image ls -a

# docker 删除镜像的时候可能删不掉
    1. 一个镜像对应多个标签
    2. 别的镜像依赖这个镜像
    3. 容器对这个镜像有依赖

# commit
    commit是用来理解镜像构成，或者特殊场合，如保存入侵现场，定制镜像用Dockerfile完成
    因为commit以后是一个黑箱操作, 
    docker diff webserver 查看改动
    docker commit webserver nginx:v2
    docker histroy

# install mac
    brew install docker docker-compose docker-machine
    brew cask install virtualbox

# create machine
    docker-machine create --driver virtualbox default
    docker-machine start default

# test docker
    docker run hello-world

# pull images
    docker pull nginx

# docker run
    docker run -d -p 80:80 --name webserver nginx

#  基本语法
    FROM nginx # 基础镜像
    FROM scratch # 空镜像

# RUN
    RUN apt-get update
    RUN apt-get install -y gcc libc6-dev make
    RUN wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz"
    RUN mkdir -p /usr/src/redis
    RUN tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1
    RUN make -C /usr/src/redis
    RUN make -C /usr/src/redis install

Dockerfile中每个指令都会建立一层镜像, RUN也不例外, 所以正确的做法是写在一起
RUN buildDeps='gcc libc6-dev make' \
    && apt-get update \
    && apt-get install -y $buildDeps \
    && wget -O redis.tar.gz "http://download.redis.io/releases/redis-3.2.5.tar.gz" \
    && mkdir -p /usr/src/redis \
    && tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \
    && make -C /usr/src/redis \
    && make -C /usr/src/redis install \
    && rm -rf /var/lib/apt/lists/* \ # 清理不用的文件
    && rm redis.tar.gz \
    && rm -r /usr/src/redis \
    && apt-get purge -y --auto-remove $buildDeps # 清理apt-get缓存文件


# 创建镜像
    docker build -t nginx:v3 .

# 解决方案
    # Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
    docker-machine restart&&eval "$(docker-machine env default)"&&docker-machine env

DOCKER 会把当前context中的文件复制到docker引擎中

# COPY 错误用法
    COPY ../package.json /app 或者 COPY /opt/xxxx /app
# COPY 正确用法
    COPY ./package.json /app/

# docker build 用法
    docker build -t nginx:v3 .
    docker build https://github.com/twang2218/gitlab-ce-zh.git#
    docker build http://server/context.tar.gz

# docker 命令
    # cp
    docker cp 123.txt bb089aa:/root/
    # add 
    是cp的升级版本，可以自动下载链接文件, 但还是建议用run wget
    某些情况有用，会自动解压压缩文件

# CMD容器启动命令
    docker run -it ubuntu # 会自动进入bash
    docker run -it ubuntu cat /etc/os-release

shell格式: CMD <命令>
    echo $HOME
    实际会转化成 ["sh", "-c", "echo $HOME"]
    exec格式: CMD ["可执行文件", "argv1", "argv2"], 用"", 因为会解析成json

docker内的应用都应该前台执行


# ENTRYPOINT
    用法一:
    本质上和CMD是一样的，但是变成添加附加参数
    asd = ENTRYPOINT ["echo"]
    docker run asd 123

    asd = CMD ["echo", "123"]
    docker run asd

用法二:
    应用前的准备工作
    1. 一个预处理脚本
    ENTRYPOINT ["docker-entrypoint.sh"]
    CMD ["redis-server"]

    ENV 设置环境变量
    ENV key1 value1
    ENV key1=value1 key2=value2 \
        key3="111 111"

ARG 构建参数
    ARG和ENV效果一样, 区别是在容器运行时就不存在了

VOLUME定义匿名卷
    VOLUME /data
    docker run -d -v mydata:/data xxxx # 用mydata这个匿名卷来替换

EXPOSE 声明端口
    EXPOSE 80 81 82
    1. 帮助使用者理解这个镜像服务的守护端口
    2. docker run -P 时会自动映射EXPOSE的端口
        -p <宿主机端口>:<容器端口> # 用法不同

WORKDIR指定工作目录
    以后各层的当前的目录, 就被改为指定的目录
    默认是/

USER指定当前用户
    RUN groupadd -r redis && useradd -r -g reids redis
    USER redis
    RUN ["redis-server"]

# gosu 以另外的用户执行
    RUN groupadd -r redis && useradd -r -g reids redis
    RUN wget -O /usr/local/bin/gosu "https://github.comm/tianon/gosu/release/download1.7/gosu-amd64"\
        && chmod +x /usr/local/bin/gosu \
        && gosu nobody true
    CMD [ "exec", "gosu", "redis", "redis-server" ]


HEALTHCHECK健康检查
    HEALTHCHECK --interval=5s --timeout=3s \
                CMD curl -fs http://localhost/ || exit 1

ONBUILD为他人做嫁衣
    是一个特殊的指令，它后面是其他指令，比如RUN, COPY等
    这些指令在镜像构建时不会被执行，只有以当前镜像为基础镜像时才会被执行

    FROM node:slim
    RUN mkdir /app
    WORKDIR /app
    ONBUILD COPY ./package.json /app
    ONBUILD RUN ["npm", "install"]
    ONBUILD COPY . /app/
    CMD ["npm", "start"]

    FROM my-node

多阶段构建
一个docker文件
    docker build -t test:v1 -f Dockerfile.one
    问题1. Dockerfile 特别长
        2. 镜像层次多，镜像体积大，部署时间变长
        3. 源代码存在泄露风险

分散到多个Dockerfile
    from golang:1.9-alpine
    build something
    from alping:latest
    copy --from=0 /go/src/github.com/go/helloworld/app .
    CMD ["./app"]

其他制作镜像的方式
    docker import http://download.../unbuntu.tar.gz openvz/ubuntu:14:04
    # 以前的方式，docker save, docker load 保存为tar文件，再导入
    docker save alping | gzip > alpine-latest.tar.gz
    docker load -i alpine-latest.tar.gz

写成一行
    docker save ubuntu:14.04 | bzip2 | pv | ssh server_a 'cat | docker load'

镜像的实现原理
    使用UnionFS将不同的层结合到一个镜像中去

操作Docker容器
    docker run -it ubuntu:14.04 bash 
    docker run ubuntu:14.04 /bin/echo "hello, world"

运行docker run 以后的后台标准操作
    1. 检查本地是否存在指定的镜像，不存在就从公有仓库下载
    2. 利用镜像创建并启动一个容器
    3. 分配一个文件系统，并在只读镜像外挂载一层可读写层
    4. 从宿主机配置的网桥接口中桥接一个虚拟接口到容器中
    5. 从地址池配置一个ip地址给容器
    6. 执行用户指定的应用程序
    7. 执行完毕容器被终止

attach命令
    docker run -dit ubuntu
    docker attach 243c
    如果从这个stdin中exit, 会导致容器停止

exec命令
    如果从这个stdin中exit, 容器不会停止

导出容器
    docker export 7691a811437 > ubuntu.tar # 导出容器的快照

导入容器
    cat ubuntu.tar | docker import  - test/ubuntu:v1.0
    docker import http://example.com/example.tgz example/exampkepo

# import 和 load的区别
    load会保存所有的历史记录
    import不会保存, 可以重新指定标签等元数据信息

# 删除所有停止的容器
    docker container prune

# docker search centos --filter=stars=30 # 30星以上的镜像
# docker pull 下载

用户在登录后通过docker push来将镜像推送到Docker Hub
docker tag ubuntu:17.10 username/ubuntu:17.01

私有仓库
    docker-registry 创建私有仓库
    # 用registry镜像来运行
    docker run -d -p 5000:5000 -v /opt/data/registry:/var/lib/registry registry

    标记镜像:
    docker tag ubuntu:latest 127.0.0.1:5000/ubuntu:latest
    docker push 127.0.0.1:5000/ubuntu:latest
    # 查看镜像
    curl 127.0.0.1:5000/v2/_catalog

私有仓库高级配置
    pass

Docker数据管理
1. 数据卷(Volumes)
    1.1 可在容器之间共享和重用
    1.2 数据卷的修改会立马生效
    1.3 数据卷的更新, 不会影响镜像
    1.4 数据卷默认会一直存在, 即使容器被删除

    docker volume create my-vol
    docker volume ls
    docker volume inspect ee9cff1ffe # 查看详情
    docker volume prune # 清除无主容器

    # 启动一个挂载数据卷的容器, 数据卷可挂载多个
    docker run -d -P --name web --mount source=my-vol,targer=/webapp traning/webapp python app.py

2. 挂载主机目录(Bind mounts)
    - 挂载一个主机目录作为数据卷
    docker run -d -P --name web --mount type=bind, source=/src/webapp,target=/opt/webapp \
        training/webapp python app.py
    # readonly 变成只读目录
    - 挂载一个本地主机文件作为数据卷
    docker run --rm -it --mount type=bind,source=$HOME/.bash_history, target=/root/.bash_history \
        ubuntu:17.10 bash

    Dockerfile的VOLUME指令后的任何东西都不能改变该Volume，比如：

    FROM debian:wheezy
    RUN useradd foo
    VOLUME /data
    RUN touch /data/x
    RUN chown -R foo:foo /data

3. 远程目录
    # docker host
    docker plugin install --grant-all-permissions vieux/sshfs
    
    # create a volume
    docker volume create --driver vieux/sshfs \
          -o sshcmd=test@node2:/home/test \
          -o password=testpassword \
          sshvolume

    # create a volume while start
    docker run -d \
          --name sshfs-container \
          --volume-driver vieux/sshfs \
          --mount src=sshvolume,target=/app,volume-opt=sshcmd=test@node2:/home/test,volume-opt=password=testpassword \
            nginx:latest

Docker中的网络功能介绍
1. 外部访问容器
    docker run -P training/webapp 会随机映射一个49000-49900的端口到内部容器
    docker run -p 5000:5000 -p 6000:6000 training/webapp  # 默认所以ip
    docker run -p 127.0.0.1:5000:5000 training/webapp  # 指定127.0.0.1
    docker run -p 127.0.0.1::5000 training/webapp  # 分配任意一个端口
    docker port nostalgic_mores 5000 # 查看5000对应的绑定地址

2. 容器互联
    新建网络(bridge, overlay)
        docker network create -d bridge my-net
    连接容器
        docker run -it --rm --name busybox1 --network my-net busybox sh
        docker run -it --rm --name busybox2 --network my-net busybox sh
        ping busybox1
        ping busybox2
        # 多个容器之间互联需要docker compose

# mac 127.0.0.1 运行不了
docker-machine ip

配置DNS
    容器内使用mount查看挂载的信息
    宿主机的/etc/resolv.conf更新时，容器内也可以更新

    配置全部容器的DNS, 可以在/etc/docker/daemon.json
    {
        "dns": [
            "114.114.114.114",
            "8.8.8.8"
        ]
    }
    通过docker run -it --rm ubuntu:14.04 cat /etc/resolv.conf

    指定hostname -h HOSTNAME, 但是只会在容器内看到，容器外看不到


高级网络配置
    docker 启动时会自动在主机上创建一个docker0虚拟网桥,实际是linux的一个bridge
    可以理解为一个软件交换机, 挂载到它的网口之间进行转发。
    同时docker随机分配一个本地未占用的私有网段中的一个地址给docker0接口, 比如
    典型的172.17.42.1, 掩码255.255.0.0, 此后启动容器内的网口也会自动分配一个同一
    网段172.17.0.0/16的地址

    当创建一个Docker容器时，同时会创建一对veth pair接口,例如vethAQI2QT,
    这样主机可以和容器通信，容器之间也可以相互通信

快速配置指南
    只有在Docker服务启动的时候才能配置，不能马上生效
    -b BRIDGE 指定挂载的网桥
    --bip=CIDR 定制 docker0的掩码
    -H SOCKER... Docker服务端接收命令的通道
    --icc=true|false 是否支持容器之间进行通信
    --ip-forward=true|false 参见下文容器之间的通信
    --iptables=true|false 是否允许Docker添加iptables规则
    --mtu=BYTE 容器网络中的MTU

    可以在启动服务或者启动容器时指定
    --dns=IP_ADDRESS
    --dns-search=DOMAIN 指定DNS搜索域

    docker run时使用
    -h HOSTNAME HOSTNAME 配置主机名
    --link=CONTAINER_NAME:ALIAS 添加到另一个容器的连接
    --net=bridge|none|container:NAME_OR_ID|host 配置容器的桥接模式
    -p SPEC 映射容器端口到宿主机
    -P 映射容器所有端口到宿主机


容器访问控制
    通过liunx的iptables防火墙来进行管理和实现的
    
    容器访问外部网络
        检查转发是否打开
        $sysctl net.ipv4.ip_forward
        net.ipv4.ip_forward = 1

        # 手动打开
        $sysctl -w net.ipv4.ip_forward=1

    容器之间访问
        1. 网络拓扑是否已经互联，默认都会连接到docker0网桥上
        2. 本地系统的iptables是否允许通过
    
    访问所有端口:
        Docker服务启动时默认添加一条转发策略到iptables的FORWARD链上。取决于icc的值
    
    访问指定端口:
        配置icc=false关闭网络访问后，key通过--link=CONTANER_NAME:ALIAS来访问容器的开放端口

        实际例子:
        启动docker时设置, icc=false --iptables=true,关闭容器互联，允许docker修改系统的iptables
        之后启动容器时，使用--link=CONTANER_NAME:ALIAS, 会在iptable 中添加ACCEPT规则，
        允许相互访问开放的端口, 取决于Dockerfile中的expose指令

    映射容器端口到宿主机的实现
        容器访问外部实现
            源地址都会被NAT成本地系统的IP地址, 使用iptables的源地址伪装操作实现
        sudo iptables -t nat -nL # 查看主机的NAT规则
        ...
        Chain POSTROUTING (policy ACCEPT)
        target     prot opt source              destination
        MASQUERADE  all  --  172.17.0.0/16      !172.17.0.0/16
        ...
        将所有源地址在172.17.0.0/16网段，目标地址为其他网段的流量动态伪装成从系统网卡发出的
        MASQUERADE 跟传统SNAT的好处是它能从动态从网卡获取地址

    外部访问容器的视线
        本地的nat表中添加相应的规则
        
配置docker0网桥
    --bip=CIDR 例如 192.168.1.5./24
    --mtu=BYTES 

    `brctl show` 查看网桥和端口连接信息
    每次创建一个新容器的时候，docker从可用的地址段选择一个空闲的ip分配给docker的eth0端口
    使用本地主机上docker0接口的IP作为默认网关
    $ip addr show eth0
    $ip route

自定义网桥
    启动docker的时候, -b BRIDGE
    # 停止服务，删除旧的网桥 
    systemctl stop docker
    ip link set dev docker0 down
    brctl delbr docker0

    # 创建一个网桥bridge0
    brctl addbd bridge0
    ip addr add 192.168.5.1/24 dev bridge0
    ip link set dev bridge0 up

    # 确认网桥创建并启动
    ip addr show bridge0

    # 设置启动时使用bridge0网桥
    vi /etc/docker/daemon.json
    {
        "bridge": "bridge0",
    }

# 工具和示例


# mark 150
