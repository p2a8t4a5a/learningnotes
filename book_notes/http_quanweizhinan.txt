# HTTP 权威指南笔记


## 第一章
1. MIME类型
    例:Content-type: image/jpeg
    用斜杠分隔, text/plain, text/html

2. URI统一资源标识符(Uniform Resource Identifier)
    URL:
        http://www.baidu.com/index.html
        http://www.baidu.com/index.jpg
    URN:
        urn:ietf:rfc:2141
        还在实验阶段

3. HTTP方法
    GET
    POST
    PUT
    DELETE
    HEAD -- 仅发送命名资源响应中的头部

4. HTTP报文
    # 起始行
    POST /test/hi.txt HTTP/1.0
    # 首部字段 ":" 分隔
    Accept: text/*
    Accept-Language: en,fr

    # 主体
    this is a content

5. telnet 实现HTTP
telnet 115.231.99.135 80 
GET /campaign/manfit/share HTTP/1.1
Host: zh-campaign.touchpal.com



6. 端口扫描
    telnet www.wantjr.com 3306
    telnet www.wantjr.com 3307

for (( i=1;i<=65536;++i)) do echo $i >> data.out; telnet www.wantjr.com $i >> data.out; done;


7. URL格式
<scheme>://<user>:<passwd>@<host>:<port>/<path>;<params>?<query>#>frag>

params:
    1. 参数为type, 值为d
        ftp://prep.ai.mit.edu/pub/gnu;type=d 
    2. 两个路径段
        http://www.joe-hardware.com/hammers;sale=false/index.html;graphics=true

URL编码
对不安全的字符进行编码，确保能够正常访问

8. 常用协议
http:
https:
ftp:
file:
mailto:
rtsp:实时流传输协议

第三章http报文






# 状态码表示 
100 - 199 信息性状态码
    100 Continue 收到了客户端的消息，可以继续发送
200 - 299 成功
    200 OK
    201 Created
    202 Accepted 服务器接受了请求，但是还未执行，需要返回继续请求的地址
    203 Not-Authoritative Information
    204 No Content 没有实体的主体部分
    205 Reset Content 告知浏览器清除HTML表单中的内容
    206 Partial Content 告知客户端成功的执行了范围请求
                        
300 - 399 重定向
    300 Multi Choices 返回的内容可以包含Location作为首选项
    301 Moved Permanently 返回的Location包含现在的地址
    302 Found 临时定位到Location的url,以后还是用原先的url访问
    303 See Other 用别的方式获取资源，包含在LOCATION中
        HTTP/1.1引入 
    304 Not Modified 不应该包含实体部分     请求头: IF-modified-since:  2017
    305 Use Proxy 返回的Location中需要包含代理的地址
    306 保留
    307 Temporary Redirect ~= 302
        HTTP/1.1引入, 302的一个问题， 即使客户端发送的是POST，重定向后变成了GET

400 - 499 客户端错误
    400 Bad Request 错误的请求
    401 Unauthorized 未认证
    402 Payment required 未启动该功能
    403 Forbidden 通常不想告诉客户端原因
    404 Not Found
    405 Method Not Allow 用Allow告知客户端哪些方法是支持的
    406 Not Acceptabe 不接受该类型的实体
    407 Proxy Authentication Required  类似401
    408 Request Timeout  客户端完成请求过长，对正常请求，时间是足够的
    409 Conflict 请求可能在资源上引发冲突
    410 Gone 类似404
    413 Request Entity Too Large 请求的主体太大 
    414 Request URI Too Long 请求URI太长

500 - 599 服务器错误
    500 Internal Server Error 服务器内部错误    
    501 Not Implemented 服务器还未支持, 或超出了能力范围
    502 Bad Gateway 无法连接网关
    503 Service Unavaiable 服务暂时不可用, Retry After 字段表示多久后重试
    504 Gateway Timeout 网关响应超时
    505 Http Version Not supported


版本号的比较
1. HTTP/1.22 > HTTP/1.3
    用.分割


HTTP 响应头
Date:Sun, 04 Feb 2018 06:17:09 GMT


首部延续行:(前面增加空格或者\t)
Server: Test Server
    Version 1.0



HTTP/0.9
EXAMPLE:
GET /campaign/manfit/share (没有版本号)


HTTP方法
1.GET
2.HEAD(HTTP/1.1)
    只返回GET的首部(gb_server不支持)
3.PUT
    用于向服务器的资源(文件)中存储数据
4.POST
    用于向服务器发送数据
5.TRACE
    用于追踪请求头变成什么样子(gb_server不支持)
6.OPTIONS
    access-control-allow-methods :GET, POST, DELETE, OPTIONS
7.DELETE
    HTTP规范允许服务器在不通知客户端的情况下撤销这个请求

扩展方法:
1. LOCK
    锁定资源
2. UNLOCK
    取消锁定

惯例: 对所发送的内容严格，对接收的内容宽松


首部：
1. 通用首部:
    Date: Tue, 3 OCT 1974 02:16:00 GMT
    Cache-Control:

2. 请求首部:
    信息性首部:
        Client-IP:
        Host:
        User-Agent:
    Accept首部:
        Accept: */* 接受全部类型
        Accept-Charest: 
        Accept-Encoding: 
    条件请求首部:
        if-Match:
        if-Modified-Since:
        if-Unmodified-Since:
        Range:
    安全请求首部:
        Authorization:
        Cookie:
        Cookie2:用来说明支持的cookie版本
    代理请求:
        Proxy-Authorization:
        Proxy-Connection:

3. 响应首部:
    Server:TornadoServer/2.4.1
    Retry-After: 如果资源不可用在此时间后重试
    协商首部:
        Accept-Ranges:
    安全响应首部:
        Set-Cookie:

4. 实体首部:
    Content-type: text/html
    Allow: GET,POST
    Location: 告诉客户端实际在何处
    1. 内容首部
        Content-Language:
        Content-Length:
    2. 实体缓存首部:
        Last-Modified:
        ETag:
        Expires:


# 第四章 连接管理
    TCP的可靠数据管道
        更深入参考资料: 《TCP/IP详解》
    HTTP网络协议栈:
        HTTP -> TCP -> IP -> 数据链路层
        HTTP -> TSL/SSL -> TCP -> IP -> 数据链路层
    TCP连接通过4个值来识别:
        <源IP, 源端口，目的IP，目的端口>

Socket编程
s = socket(<parameters>)
bind(s, <local ip, port>)
connect(s, <remote ip, port>)
listen(s, ...)
s2 = accept(s)
n = read(s, buffer, n)
n = write(s, buffer, n)
close(s) # 完全关闭
shutdown(s, <side>) # 只关闭输入或输出
getsocketopt(s, ...) # 获取socket选项
setsocketopt(s, ...) # 设置socket选项


对TCP性能的考虑
1. TCP网络的时延取决于:
    - 硬件
    - 网络
    - 服务器负载
    - 请求响应报文的尺寸
    - 客户端服务器距离
    - TCP协议的技术复杂性

2. 性能聚焦区域
    TCP连接握手时延
        - 小的HTTP事物可能在TCP建立链接花费50%的时间

    延迟确认
        - 期望捎带确认，为了更有效的利用网络。时间通常在100-200ms之间。为了加速可以关闭。

    TCP慢启动
        - 收到一个ACK会加速一倍 

    Nagel算法与TCP_NODELAY
        - Nagle算法期待缓存满1500字节再发送，所以会增加延时
        - Nagle算法会阻止数据的发送, 直到有确认分组到达, 会和延迟确认产生问题
        - HTTP 应用程序通常会设置TCP_NODELAY的参数, 确保不会写入一堆小分组

    TIME_WAIT累积与端口耗尽
        - TIME_WAIT 默认是2MSL 通常两分钟左右。作用是确保不会重复创建连接。
          有些操作系统会设置一个较小的值
        - 带来的性能测试时限制:性能测试时通常只有几个机器，每个机器只有60000个左右端口，
          2MSL约等于120s,所以把连接率限制在了500次每秒, 或者一次最多创建60000个连接
          解决方案是创建多个虚拟ip


HTTP连接的处理
    Connection首部
    Connection: close #表示发完下一条报文之后必须关闭连接
                # keep-alive
    例:
        Connection:meter, close # 转发时去除meter的首部
        Meter: asd


串行事物处理时延
1. 并行连接
    通常浏览器保持的最大的连接数是四个
    因为通常一起加载出来，会让用户感觉更快一点
    
2. 持久连接
    
3. 管道化连接

4. 复用连接
    







# mark 92
