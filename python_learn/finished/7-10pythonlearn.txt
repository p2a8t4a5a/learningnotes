#charpter seven
#charpter seven

a isinstance b 
from random import choice
choice([1,2])

class person():
	print 'asd'
	#however can shadow it by give it a new value
	#if it is visited by the method a.allcount
	#it becomes a local variable
	allcount=0 #this is like a static variable but not  
	def setname(self,name):
		self.name=name
	def getname(self):
		print self.name
		self.__secret() #can not less self
	def __secret(self):
		print 'it is secret'

#getname=foo    #can be ok
#foo(): print 'hahh'
#you can visit by a._Person__secret()
#but it cant be import by (from module import *)
foo=lambda x:x*x

#inherit
__metaclass__=type
class Filter():
	def init(self):
		self.blocked=[]
	def filter(self,seq):
		#there are no :
		return [x for x in seq if x not in self.blocked]
	
class SpamFilter(Filter):
	def init(self):
		self.blocked=['SPAM']

issubclass(SpamFilter,Filter)
SpamFilter.__base__
isinstance(a,SpamFilter)

class C(A,B) #multi inherit

hasattr(SpamFilter,'init')
callable(getattr(SpamFilter,'init',None))

setattr(a,'calc',lambda self,x:x*x)



#charpter eight
raise Exception

import exceptions
dir(exceptions)
class MyException(Exception):pass

try:
except (ZeroDivisonError,TypeError,NameError)

#example you can input anyway
while 1:
	try:
		x=input('first')
		y=input('second')
		print x/y
	except Exception,a:
		print 'this is a ',a
	else:
		break
	finally:
		print 'it is finished'


#charpter nine

#call the super
class A(B):
	def __init__(self,name='yaoge'):
		B.__init__(self) #super(A,self).__init__()
		self.name=name
		
#magic
def check(key):
	if not isinstance(key,(int,long)):raise TypeError
	if key<0 :raise IndexError

class MySeq:
	def __init__(self,start=0,step=1):
		self.start=start
		self.step=step
		self.changed={}
	
	def __getitem__(self,key):
		check(key)
		try:
			return self.changed[key]
		except KeyError:
			return self.start+self.step*key
	
	def __setitem__(self,key,value):
		check(key)
		self.changed[key]=value
		
	def __len__(self):
		return 1000
	
	def __delitem__(self,key):
		check(key)
		try:
			self.changed.pop(key)
		except KeyError:
			print 'this is a key error'
			
		
#property
class Rect:
	def getSize(self):
		return self.width,self.height
	def setSize(self,size):
		self.width,self.height=size
	#you can use like this
	def __setattr__(self,name,value):
		if name=='size':
			self.width,self.height=value
		else:
			self.__dict__[name]=value
	#it is called only if the dict dont have 'size'
	def __getattr__(self,name): 
		if name=='size':
			return self.width,self.height
		else:
			raise AttributeError
	#or you can just use like this
	size=property(getSize,setSize,doc="hah")			

#decorator
__metaclass__=type
class MyClass:
	#or can be used by @staticmethod
	def smeth():	
		print 'static method'
	smeth=staticmethod(smeth)
	def cmeth(cls):
		print 'this is a class method',cls
	cmeth=classmethod(cmeth)

import time
import functools
def log(text):
	def wrapper(func):
		@functools.wraps(func)
		def decorator(*args,**kw):
			print '%s %s'%(text,func.__name__)
			return func(*args,**kw)
		return decorator
	return wrapper

@log('log:')
def now():
	print time.ctime()




#iterators 1	
class Fibs:
	def __init__(self):
		self.a=0
		self.b=1
	def next(self):
		self.a,self.b=self.b,self.a+self.b
		return self.a
	def __iter__(self):
		return self

#iterators 2
def Fibs(max=100):
	a,b=0,1
	for i in xrange(max):
		a,b=b,a+b
		yield a 

#iterators 3
#unpack the []
a=[1,2,3,[4,5,6,[7,8,[9]]]]
#0.1
g=lambda s:(isinstance(s,list) and y or s for x in isinstance(s,list) and s or [1] for y in isinstance(s,list) and g(x) or [1])
#0.2
def g(s):
	try:
		for x in s:
			for y in g(x):
				yield y
	except TypeError:
		yield s

#0.3
g=lambda s:( y for x in s for y in (isinstance(x,list) and g(x) or [x]) )
	
#0.4
def g(s):
	try:
		try:s+''
		except TypeError:pass
		else:raise TypeError
		for x in s:
			for y in g(x):
				yield y
	except TypeError:
		yield s

#eight queens question
def check(ans,num):
	t=len(ans)
	for i in range(t):
		if ans[i]==num or  ans[i]+i==num+t:
			return False
	return True

def queens(num,ans=()):
	for i in range(num):
		if check(ans,i):
			if len(ans)==num-1:
				yield (i,)
			else :
				for j in queens(num,ans+(i,)):
					yield (i,)+j

def myprint(ans):
	def printline(pos,length=len(ans)):
		print '.'*pos+'X'+'.'*(length-pos-1)
	for pos in ans:
		printline(pos)	

#charpter 10
import sys
sys.path.append('home/yao')
import test
#if you want to reload the test
test=reload(test)
if(__name__=='__main__') test()

import sys,pprint
pprint.pprint(sys.path)

#package
#import mytest.test
#from mytest import test 
#from mytest import *
__init__.py #in the package and others

#browse the package
[i for i in dir(copy) if not i.startswith('_')]
__all__=['test','test2']

print copy.__doc__
print copy.__file__

import sys
sys.argv #the script name
sys.exit('asd') sys.exit(1)
sys.modules
sys.path
sys.platform

f=open('./mytest/test.py','r') #'r','w','a' means appending,'b' means binary
f.readline() #include the \n


import os
os.system('...')
os.linesep #sep,pathsep
os.environ['PYTHONPATH']
os.urandom(3) #cryptographically 

import webbrowser
webbrowser.open('http://www.baidu.com')

#fileinput

import fileinput                                   #  1
for line in fileinput.input(inplace=True):         #  2
    line=line.rstrip()                             #  3
    line=line.replace('\t','    ')                 #  4
    num=fileinput.lineno()                         #  5
    print '%-50s # %2i' % (line,num)               #  6

#datastructures
#set
a=set(range(3))
b={2,3,4}
a|b
a<=b
a-b
set.union(a,b)
a.add(frozenset(b))

#Heaps
import heapq
heap=[]
heappush(heap,3)

#deque
from collections import deque
a=deque(range(5))
a.append(2)
a.appendleft(2)
a.pop()
a.rotate()

#time
import time
time.asctime() #return string
time.localtime() #return tuple
time.sleep()
time.time() #return seconds

#timeit calculate the time it takes to
import timer
timer.timer(test,number=10)
#random
random.random()
random.shuffle(a) #a=[12,3,4,4,5]
random.getrandbits(32)
random.choice(seq)
random.uniform(0,360) #return double
random.randrange(1,11) #return int

#shelve --- a simple way to store thing in file
import shelve
s=shelve.open('data.in')
s['x']=[1,2,3,4]
s.close()

#regular expression
. #match everything \\.
[ab] #matchab
[a-z]
[^a-z]
'^ht+p' #means ht+p appears in the front
'ht+p$' #means ht+p appears in the end
| #or

#example
r'(http://)?(www\.)?python\.org'
*	 #0-INF
+	 #1-INF
a{n1,n2} #repeat a n1-n2 times

#regular expression usage
re.match(pat,s) #find the pat at the begin 
re.findall(pat,s)

(?:abc) #(?:) 非捕获型括号
(?P=<name>) #有名字括号

som_text="aaaasd,,,,,qwe,,,123,ggg,0"
re.split(',+',som_text)

pat = r'[.?\-",]+' #change the meaning of -

text="hello,name."
pat=re.compile('name')
pat.sub('yaoge',text)

re.escape('hello yaoge')

m=re.match(r'www\.(.*)\..{3}','www.python.org')
m.group(1)
m.start(1)
m.end(1)
m.span(1)

pat=re.compile('\*([^\*]+)\*')
pat.sub('<em>\\1</em>','hello,*world*')

pat=re.compie(r'\*{2}(.+?)\*{2}') #? means it is not greedy
$ #bi xu pi pei dao jie wei
^ #bi xu cong kai tou kaishi pipei




a isinstance b 
from random import choice
choice([1,2])

class person():
	print 'asd'
	#however can shadow it by give it a new value
	#if it is visited by the method a.allcount
	#it becomes a local variable
	allcount=0 #this is like a static variable but not  
	def setname(self,name):
		self.name=name
	def getname(self):
		print self.name
		self.__secret() #can not less self
	def __secret(self):
		print 'it is secret'

#getname=foo    #can be ok
#foo(): print 'hahh'
#you can visit by a._Person__secret()
#but it cant be import by (from module import *)
foo=lambda x:x*x

#inherit
__metaclass__=type
class Filter():
	def init(self):
		self.blocked=[]
	def filter(self,seq):
		#there are no :
		return [x for x in seq if x not in self.blocked]
	
class SpamFilter(Filter):
	def init(self):
		self.blocked=['SPAM']

issubclass(SpamFilter,Filter)
SpamFilter.__base__
isinstance(a,SpamFilter)

class C(A,B) #multi inherit

hasattr(SpamFilter,'init')
callable(getattr(SpamFilter,'init',None))

setattr(a,'calc',lambda self,x:x*x)



#charpter eight
raise Exception

import exceptions
dir(exceptions)
class MyException(Exception):pass

try:
except (ZeroDivisonError,TypeError,NameError)

#example you can input anyway
while 1:
	try:
		x=input('first')
		y=input('second')
		print x/y
	except Exception,a:
		print 'this is a ',a
	else:
		break
	finally:
		print 'it is finished'


#charpter nine

#call the super
class A(B):
	def __init__(self,name='yaoge'):
		B.__init__(self) #super(A,self).__init__()
		self.name=name
		
#magic
def check(key):
	if not isinstance(key,(int,long)):raise TypeError
	if key<0 :raise IndexError

class MySeq:
	def __init__(self,start=0,step=1):
		self.start=start
		self.step=step
		self.changed={}
	
	def __getitem__(self,key):
		check(key)
		try:
			return self.changed[key]
		except KeyError:
			return self.start+self.step*key
	
	def __setitem__(self,key,value):
		check(key)
		self.changed[key]=value
		
	def __len__(self):
		return 1000
	
	def __delitem__(self,key):
		check(key)
		try:
			self.changed.pop(key)
		except KeyError:
			print 'this is a key error'
			
		
#property
class Rect:
	def getSize(self):
		return self.width,self.height
	def setSize(self,size):
		self.width,self.height=size
	#you can use like this
	def __setattr__(self,name,value):
		if name=='size':
			self.width,self.height=value
		else:
			self.__dict__[name]=value
	#it is called only if the dict dont have 'size'
	def __getattr__(self,name): 
		if name=='size':
			return self.width,self.height
		else:
			raise AttributeError
	#or you can just use like this
	size=property(getSize,setSize,doc="hah")			

#decorator
__metaclass__=type
class MyClass:
	#or can be used by @staticmethod
	def smeth():	
		print 'static method'
	smeth=staticmethod(smeth)
	def cmeth(cls):
		print 'this is a class method',cls
	cmeth=classmethod(cmeth)

import time
import functools
def log(text):
	def wrapper(func):
		@functools.wraps(func)
		def decorator(*args,**kw):
			print '%s %s'%(text,func.__name__)
			return func(*args,**kw)
		return decorator
	return wrapper

@log('log:')
def now():
	print time.ctime()




#iterators 1	
class Fibs:
	def __init__(self):
		self.a=0
		self.b=1
	def next(self):
		self.a,self.b=self.b,self.a+self.b
		return self.a
	def __iter__(self):
		return self

#iterators 2
def Fibs(max=100):
	a,b=0,1
	for i in xrange(max):
		a,b=b,a+b
		yield a 

#iterators 3
#unpack the []
a=[1,2,3,[4,5,6,[7,8,[9]]]]
#0.1
g=lambda s:(isinstance(s,list) and y or s for x in isinstance(s,list) and s or [1] for y in isinstance(s,list) and g(x) or [1])
#0.2
def g(s):
	try:
		for x in s:
			for y in g(x):
				yield y
	except TypeError:
		yield s

#0.3
g=lambda s:( y for x in s for y in (isinstance(x,list) and g(x) or [x]) )
	
#0.4
def g(s):
	try:
		try:s+''
		except TypeError:pass
		else:raise TypeError
		for x in s:
			for y in g(x):
				yield y
	except TypeError:
		yield s

#eight queens question
def check(ans,num):
	t=len(ans)
	for i in range(t):
		if ans[i]==num or  ans[i]+i==num+t:
			return False
	return True

def queens(num,ans=()):
	for i in range(num):
		if check(ans,i):
			if len(ans)==num-1:
				yield (i,)
			else :
				for j in queens(num,ans+(i,)):
					yield (i,)+j
def myprint(ans):
	def printline(pos,length=len(ans)):
		print '.'*pos+'X'+'.'*(length-pos-1)
	for pos in ans:
		printline(pos)	

#charpter 10
import sys
sys.path.append('home/yao')
import test
#if you want to reload the test
test=reload(test)
if(__name__=='__main__') test()

import sys,pprint
pprint.pprint(sys.path)

#package
#import mytest.test
#from mytest import test 
#from mytest import *
__init__.py #in the package and others

#browse the package
[i for i in dir(copy) if not i.startswith('_')]
__all__=['test','test2']

print copy.__doc__
print copy.__file__

import sys
sys.argv #the script name
sys.exit('asd') sys.exit(1)
sys.modules
sys.path
sys.platform

f=open('./mytest/test.py','r') #'r','w','a' means appending,'b' means binary
f.readline() #include the \n


import os
os.system('...')
os.linesep #sep,pathsep
os.environ['PYTHONPATH']
os.urandom(3) #cryptographically 

import webbrowser
webbrowser.open('http://www.baidu.com')

#fileinput

import fileinput                                   #  1
for line in fileinput.input(inplace=True):         #  2
    line=line.rstrip()                             #  3
    line=line.replace('\t','    ')                 #  4
    num=fileinput.lineno()                         #  5
    print '%-50s # %2i' % (line,num)               #  6

#datastructures
#set
a=set(range(3))
b={2,3,4}
a|b
a<=b
a-b
set.union(a,b)
a.add(frozenset(b))

#Heaps
import heapq
heap=[]
heappush(heap,3)

#deque
from collections import deque
a=deque(range(5))
a.append(2)
a.appendleft(2)
a.pop()
a.rotate()

#time
import time
time.asctime() #return string
time.localtime() #return tuple
time.sleep()
time.time() #return seconds

#timeit calculate the time it takes to
import timer
timer.timer(test,number=10)
#random
random.random()
random.shuffle(a) #a=[12,3,4,4,5]
random.getrandbits(32)
random.choice(seq)
random.uniform(0,360) #return double
random.randrange(1,11) #return int

#shelve --- a simple way to store thing in file
import shelve
s=shelve.open('data.in')
s['x']=[1,2,3,4]
s.close()

#regular expression
. #match everything \\.
[ab] #matchab
[a-z]
[^a-z]
'^ht+p' #means ht+p appears in the front
'ht+p$' #means ht+p appears in the end
| #or

#example
r'(http://)?(www\.)?python\.org'
*	 #0-INF
+	 #1-INF
a{n1,n2} #repeat a n1-n2 times

#regular expression usage
re.match(pat,s) #find the pat at the begin 
re.findall(pat,s)


som_text="aaaasd,,,,,qwe,,,123,ggg,0"
re.split(',+',som_text)

pat = r'[.?\-",]+' #change the meaning of -

text="hello,name."
pat=re.compile('name')
pat.sub('yaoge',text)

re.escape('hello yaoge')



m=re.match(r'www\.(.*)\..{3}','www.python.org')
m.group(1)
m.start(1)
m.end(1)
m.span(1)

pat=re.compile('\*([^\*]+)\*')
pat.sub('<em>\\1</em>','hello,*world*')

pat=re.compie(r'\*{2}(.+?)\*{2}') #? means it is not greedy
$ #bi xu pi pei dao jie wei
^ #bi xu cong kai tou kaishi pipei



