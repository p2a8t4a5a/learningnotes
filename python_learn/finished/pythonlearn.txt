charpter 11
#file
f=open('data.out','w',-1) #-1 means default size of buffering
						  #0 means no buffering
						  #int means the size of buffering
#only when you use flush or close will use the disk

import sys
sys.stdin.readline() #include the \n
raw_input() #not the \n

#sys.stdin in  python3
import sys, io
string = "A line from the string as stdin IO \n This line wont be read"    # A line of text we'll use as stdin
file = open('test.txt')   # A text file we'll use as stdin
line = input()    # Input from stdin, hopefully keyboard in this case
print(line)
sys.stdin = io.StringIO(string)    # Assigning stdin a File-like object from the string
line = input()    # Read a line from the stdin
print(line)
sys.stdin = file    # Assign stdin the file object, so it will read from it
line = input()    # Read a line from file
print(line)
sys.stdin = sys.__stdin__    # Reset the stdin to its default value


#input 1
while 1:
	try:
		a=raw_input()
	except EOFError:
		break;
	print a
#input 2
import sys
for line in sys.stdin:
	print line


f.write('012345678910')
f.seek(5) #move to
f.write('hello,world')

f.tell() #return current position 

#close file automatically
with open('data.in') as file:
    for lines in file:
         print lines

f.writelines(lines)

#fileinput lazy line iteration
import fileinput
for line in fileinput.input('data.in'):
	print line

#most elegant way
f=open(filename)
for line in f:
	print line
f.close()


#charpter 15
\s #匹配空格字符\n\t空格
re.VERBOSE #ignore the 空白字符 除\n等
.* #不匹配\n 


#找出jobs网上的工作信息
pat=re.compile(r'''
	\s*	
 	<span\ class="listing-new">New</span>
	\s*
	<a\ href="(.*?)">(.*?)</a><br/>
	\s*
     (.*?)\s*</span>'''
,re.VERBOSE)

#Tidy a tool that repair the html file

from subprocess import Popen,PIPE
text=open('data.in').read()
tidy=Popen('tidy',stdin=PIPE,stdout=PIPE,stderr=PIPE)
tidy.stdin.write(text)
tidy.stdin.close()
print tidy.stdout.read()

#HTMLParser
from urllib import urlopen
from HTMLParser import HTMLParser

class Scraper(HTMLParser):
	in_h2=False
	in_link=False
	
	def handle_starttag(self,tag,attrs):
		attrs=dict(attrs)
		if tag=='h2':
			self.in_h2=True
		if tag=='a' and 'href' in attrs:
			self.in_link=True
			self.chunks=[]
			self.url=attrs['href']

	def handle_data(self,data):	
		if self.in_link and self.in_h2:
			self.chunks.append(data)
	
	def handle_endtag(self,tag):
		if tag=='h2':
			self.in_h2=False
		if tag=='a':
			if self.in_h2 and self.in_link:
				print '%s (%s)'%(''.join(self.chunks),self.url)
			self.in_link=False
	
text=urlopen('https://python.org/jobs').read()
parser=Scraper()
parser.feed(text)
parser.close()

#BeautifulSoup
from BeautifulSoup import BeautifulSoup
soup=BeautifulSoup('lxml')
soup.title.a #only one
soup.title.a['class']
soup.title.a.string #value



#examples
from urllib import urlopen
from BeautifulSoup import BeautifulSoup

text=urlopen('https://python.org/jobs').read()
soup=BeautifulSoup(text)
print 'load ok'
jobs=set()
for header in soup('h2'):
	links=header('a')
	if not links:continue
	
	link=links[0]
	jobs.add('%s (%s)'%(link.string,link['href']))

print '\n'.join(sorted(jobs,key=lambda s:s.lower()))



#多线程
import threading  
from  network import mypost
class timer(threading.Thread):   
    def __init__(self,say):
        threading.Thread.__init__(self)
        self.say=say

    def run(self): 
        mypost(self.say)
 
def test():  
    threads=[None]*7
    for i in range(7):
        threads[i]=timer(chr(i+97))
    for i in range(7):
        threads[i].start()  
 
if __name__ == '__main__':  
    test()  


#gevent 协程
from gevent import monkey
import gevent
monkey.patch_all()
import requests

def test(url):
    print 'start:',url
    response=requests.get(url)
    print 'finish',url


gevent.joinall(
    [gevent.spawn(test,'http://www.sina.com'),
     gevent.spawn(test,'http://www.wantjr.com'),
     gevent.spawn(test,'http://www.python.org')])


#判断是否是IP地址
import re
def judge(res):
    pat=re.compile(r'^(?:\d{1,3}\.){3}(?:\d{1,3})$')
    a=pat.match(res)
    if a:
        s=a.group(0).split('.')
        return reduce(lambda a,b:a and 0<=int(b)<=255 ,s,True)
    return False

判断是否是 a.b 的形式
不需要以.bat .exe 的格式

前向否定
pat=re.compile(r'^[^.]+[.](?!bat$|exe$)[^.]+$')

(?<!abc) 尾巴不是abc

hex(16)
int('123',8) #123是八进制
oct()
bin()


import struct
a=struct.pack('!2I3sI',1,2,'abc',3)#!网络字节序 >大端 <小端
a=struct.unpack('!2I3sI',a)

#print error
1.print >> sys.stderr,'123'
2.sys.stderr.write('123')
3.from __future__ import print_function
print('123',file=sys.stderr)



charpter 16


# safe eval method
eval 
ast.literal_eval




# 目录用法
from optparse import OptionParser
parser = OptionParser()
parser.add_option("-f", "--file", dest="filename", help="write report to FILE", metavar="FILE")
parser.add_option("-q", "--quiet", action="store_false", dest="verbose", default=True, help="don't print status messages to stdout")
(options, args) = parser.parse_args()

# better
argparse
