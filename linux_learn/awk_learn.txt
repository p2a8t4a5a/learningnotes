
# 特殊含义
$0 整行
$1 第几列
NR 行数
FILENAME 文件名

# 完整信息 
awk 'BEGIN{} {} END{}'


# 只能单引号
# awk '{print $1,$3}' netstat.txt

# 格式化输出
awk '{printf "%-8s %-8s\n",$1,$2}' netstat.txt

# 过滤记录
awk '$3==0 && $6=="ESTABLISHED"' netstat.txt


# 过滤+格式化输出
awk '$3==0 && $6=="ESTABLISHED" {print $1}' netstat.txt


# 过滤+格式化输出 需要表头 
awk '$3==0 && $6=="ESTABLISHED"  || NR==1 {print $1}' netstat.txt


# 指定输入分隔符
# 一个
echo "123;456:789" | awk -F: '{print $1,$2,$3}'
awk 'BEGIN{FS=":"} {print $1,$3,$6}' /etc/passwd
# 多个
echo "123;456:789" | awk -F '[;:]' '{print $1,$2,$3}'


# 指定输出分隔符
awk  -F: '{print $1,$3,$6}' OFS="\t" /etc/passwd

# 正则匹配
awk '/WAIT/' netstat.txt
awk '$6 ~ /WAIT/ {print $5}' netstat.txt

不匹配
awk '!/WAIT/' netstat.txt
awk '$6 !~ /WAIT/ {print $5}' netstat.txt


# 拆分列
# 神器 根据列的不同，直接输出
awk 'NR!=1{print > $6}' netstat.txt


# 高级拆分列
awk 'NR!=1{if($6 ~ /TIME|ESTABLISHED/) print > "1.txt";
else if($6 ~ /LISTEN/) print > "2.txt";
else print > "3.txt" }' netstat.txt

# 统计信息
ls -l | awk '{sum+=$5} END {print sum}'
# 高级统计
awk 'NR!=1{a[$6]++;} END {for (i in a ) print i, a[i]; }' netstat.txt

#从file文件中找出长度大于80的行
awk 'length>80' file




统计命令

abtest 304比例
awk 'BEGIN{a=0;a_304=0;} {if($0 ~ "integrated/abtest") {a+=1; if($0 ~ "GET.{2}304"){a_304+=1;}} } END{print a, a_304;}'

统计interface 和 abtest比例
awk 'BEGIN{i=0;i_304=0;a=0;a_304=0;} {if ($0 ~ "integrated/interface/get") {i+=1;} else if($0 ~ "integrated/abtest") {a+=1;} } END{print i,a}'
