







1.亲密性: 用间距的大小来表示组件间的关系, 越亲密，距离越近

2.对齐: 文案类的一条直线的对齐好于分几条线的对齐，除了为了强调标题意外
        表单类对齐: 冒号对齐(靠右对齐), 会一目了然
        数字类: 相同位数，右对齐

3.对比: 突出常用操作, 弱化其他项
        在一些需要用户慎重决定的地方，不能替用户或诱导用户做出决定
        总分关系对比: 突出层次感
        状态关系对比: 通过颜色辅助形状实现关系对比

4.重复: 减少用户学习成本，帮助识别关联性

5.直截了当: 
    1. 正如 Alan Cooper 所言：『需要在哪里输出，就要允许在哪里输入』。这就是直接操作的原理。eg：不要为了编辑内容而打开另一个页面，应该直接在上下文中实现编辑。
    2. 当『易读性』远比『易编辑性』重要时，可以使用『单击编辑』。
    3. 当『易读性』为主，同时又要突出操作行的『易编辑性』时，可使用『文字链/图标编辑』。
    4. 显示和编辑相差较大时，向用户解释刚刚发生了什么
    5.拖放功能只能限制在一个维度

6.足不出户:
    1. 能在这个页面解决的问题，就不要去其它页面解决，
       因为任何页面刷新和跳转都会引起变化盲视（Change Blindness），
       导致用户心流（Flow）被打断。频繁的页面刷新和跳转，就像在看戏时，演员说完一行台词就安排一次谢幕一样。 
    2.覆盖层:二次确认覆盖层：避免滥用 Modal 进行二次确认，应该勇敢的让用户去尝试，给用户机会『撤消』即可。
        无法撤销的操作让用户一个小的提示框取消即可
    3.详情覆盖层：一般在列表中，通过用户『悬停』/『点击』某个区块，在当前页加载该条列表项的更多详情信息
    4.嵌入层: 在列表中，显示某条列表项的详情信息，保持上下文不中断。
    
7.简化交互
    1.如果用户鼠标移动距离越少、对象相对目标越大，那么用户越容易操作
    2.如果操作不重要或者可以通过其他途径完成时，可以将工具放置在用户的操作流程中，减少界面元素，降低认知负担，给用户小惊喜。
    3.当需要增强按钮的响应性时，可以通过增加用户点击热区的范围，而不是增大按钮形状，从而增强响应性，又不缺失美感。

8.
    

