源地址：http://coolshell.cn/articles/11564.html

第四层(segment) Transport TCP UDP
第三层(package) Network IP
第二层(Frame) DataLink ARP

ISN 初始化序列号
SYN 超时1,2,4,8,16,32=63秒 断开连接



防止SYN Flood攻击
1.用tcp_syncookies 用来应对攻击，通过cookie建立连接
    但是不能处理正常的大负载的链接

应对正常大负载链接,缓解syn队列耗尽问题
1.可以使用tcp_synack_retries 减少重复次数
2.tcp_max_syn_backlog 增大SYN连接数
3.tcp_abort_on_overflow 处理不过来就干脆直接拒绝连接

TIME_WAIT 确保收到ack 确保不会和后面的新连接混在一起
Linux=2*30s

TIME_WaIT数量太多
在应对高并发短链接，TIME_WAIT 太多，消耗系统资源
tcp_tw_reuse和tcp_tw_recycle来解决TIME_WAIT的问题是非常非常危险
其实，TIME_WAIT表示的是你主动断连接，所以，这就是所谓的“不作死不会死”。试想，如果让对端断连接，那么这个破问题就是对方的了，呵呵。另外，如果你的服务器是于HTTP服务器，那么设置一个HTTP的KeepAlive有多重要（浏览器会重用一个TCP连接来处理多个HTTP请求），然后让客户端去断链接（你要小心，浏览器可能会非常贪婪，他们不到万不得已不会主动断连接）。

超时重传机制：
1.一种仅重传timeout的包,如3 #节约带宽，速度慢
2.另一种重传所有数据3,4,5   #速度快，浪费带宽(某些TCP)

SACK 方法
选择确认，汇报收到的数据碎版
Duplicate SACK 汇报重复收到数据的问题
    可以知道具体的网络问题，
    比如是网络延迟，还是数据丢包，还是ACK丢包
    是不是timeout太小了
    网络是是不是把我的数据包给复制了
默认打开


timeout 算法
1.加权移动平均
2.Karn / Partridge 算法 忽略重传，直接翻倍
3.Jacobson / Karels 算法 目前TCP算法 调的一手好参

TCP滑动窗口
Zero Window
注意：只要有等待的地方都可能出现DDoS攻击，Zero Window也不例外，一些攻击者会在和HTTP建好链发完GET请求后，就把Window设置为0，然后服务端就只能等待进行ZWP，于是攻击者会并发大量的这样的请求，把服务器端的资源耗尽。（关于这方面的攻击，大家可以移步看一下Wikipedia的SockStress词条）

对于一些需要小包场景的程序——比如像telnet或ssh这样的交互性比较强的程序，你需要关闭这个算法。你可以在Socket设置TCP_NODELAY选项来关闭这个算法






